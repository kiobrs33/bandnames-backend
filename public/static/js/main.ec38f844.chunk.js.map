{"version":3,"sources":["context/SocketContext.js","hooks/useSocket.js","components/BandAdd.js","components/BandChart.js","components/BandList.js","components/ui/Spinner.js","HomePage.js","BandNamesApp.js","index.js"],"names":["SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","transports","useState","online","setOnline","useEffect","on","useSocket","Provider","value","BandAdd","useContext","bandName","setBandName","className","onSubmit","e","preventDefault","trim","length","emit","placeholder","onChange","target","type","Chart","register","registerables","BandChart","myChart","data","destroy","createGraphh","bands","ctx","document","getElementById","getContext","labels","map","band","name","datasets","label","votes","backgroundColor","borderColor","borderWidth","options","indexAxis","animation","responsive","scales","y","beginAtZero","layout","padding","id","BandList","setBands","off","onBlurInput","newName","changeNameBand","onClick","handleOnChageInput","onBlur","Spinner","HomePage","BandNamesApp","ReactDOM","render"],"mappings":"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","file":"static/js/main.ec38f844.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { useSocket } from \"../hooks/useSocket\";\r\n\r\nexport const SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n\r\n    // Podrias excribir localhost pero para probarlo con un movil en la misma red va la IP\r\n    const { socket, online } = useSocket('http://192.168.1.13:8080');\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ socket, online }}>\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}","import { useEffect, useMemo, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nexport const useSocket = (serverPath) => {\r\n\r\n    const socket = useMemo(() => io(serverPath, {\r\n        transports: ['websocket']\r\n    }), [serverPath]);\r\n\r\n    const [online, setOnline] = useState(false);\r\n\r\n    // Estado CONECTADO\r\n    useEffect(() => {\r\n        socket.on('connect', () => {\r\n            setOnline(true);\r\n        })\r\n    }, [socket]);\r\n\r\n    // Estado DESCONECTADO\r\n    useEffect(() => {\r\n        socket.on('disconnect', () => {\r\n            setOnline(false);\r\n        })\r\n    }, [socket]);\r\n\r\n    return {\r\n        socket,\r\n        online\r\n    }\r\n}","import React, { useContext, useState } from 'react';\r\nimport { SocketContext } from '../context/SocketContext';\r\n\r\nexport const BandAdd = () => {\r\n\r\n    const { socket } = useContext ( SocketContext );\r\n    const [ bandName, setBandName ] = useState('');\r\n\r\n    const onSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(bandName.trim().length > 0){\r\n            // Create Band\r\n            socket.emit('create-band', bandName);\r\n        }\r\n\r\n        // Clean Input BandName\r\n        setBandName('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"band-add\">\r\n            <h1 className=\"band-add__title\">Agregar Banda</h1>\r\n\r\n            <form onSubmit={onSubmitForm} className=\"form\" >\r\n                <input\r\n                    className=\"form__input\"\r\n                    placeholder=\"Nombre de la banda\"\r\n                    onChange={ e => setBandName(e.target.value)}\r\n                    value={bandName}\r\n                />\r\n\r\n                <button className=\"form__submit\" type=\"submit\">Create</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Chart, layouts, registerables } from 'chart.js';\r\n\r\nimport { SocketContext } from '../context/SocketContext';\r\nChart.register(...registerables);\r\n\r\nexport const BandChart = () => {\r\n\r\n    const { socket } = useContext(SocketContext);\r\n\r\n    let myChart;\r\n\r\n    // Get All Bands\r\n    useEffect(() => {\r\n        socket.on('current-bands', data => {\r\n\r\n            if (myChart) {\r\n                myChart.destroy();\r\n            }\r\n            createGraphh(data);\r\n        });\r\n\r\n    }, [socket, myChart]);\r\n\r\n    const createGraphh = (bands = []) => {\r\n        let ctx = document.getElementById('myChart').getContext('2d');\r\n        myChart = new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n                labels: bands.map(band => band.name),\r\n                datasets: [{\r\n                    label: '# Votos',\r\n                    data: bands.map(band => band.votes),\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)',\r\n                        'rgba(54, 162, 235, 0.2)',\r\n                        'rgba(255, 206, 86, 0.2)',\r\n                        'rgba(75, 192, 192, 0.2)',\r\n                        'rgba(153, 102, 255, 0.2)',\r\n                        'rgba(255, 159, 64, 0.2)'\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                        'rgba(75, 192, 192, 1)',\r\n                        'rgba(153, 102, 255, 1)',\r\n                        'rgba(255, 159, 64, 1)'\r\n                    ],\r\n                    borderWidth: 0.5,\r\n                }]\r\n            },\r\n            options: {\r\n                indexAxis: 'y',\r\n                animation: false,\r\n                responsive: true,\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: 5\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"band-chart__title\">Grafico de votos</h1>\r\n            <canvas id=\"myChart\"></canvas>\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { SocketContext } from '../context/SocketContext';\r\n\r\nexport const BandList = () => {\r\n\r\n    const { socket } = useContext(SocketContext);\r\n    const [bands, setBands] = useState([]);\r\n\r\n    // Get All Bands\r\n    useEffect(() => {\r\n        socket.on('current-bands', data => {\r\n            setBands(data);\r\n        });\r\n\r\n        return () => socket.off('current-bands');\r\n    }, [socket]);\r\n\r\n    // Add Vote\r\n    const addVoteBand = (id) => {\r\n        socket.emit('add-vote', id);\r\n    }\r\n\r\n    // Delete Band\r\n    const deleteBand = (id) => {\r\n        socket.emit('delete-band', id);\r\n    }\r\n\r\n    // Change Name Band\r\n    const changeNameBand = (id, name) => {\r\n        socket.emit('change-name-band', { id, name });\r\n    }\r\n\r\n    const handleOnChageInput = (e, id) => {\r\n        const newName = e.target.value;\r\n\r\n        setBands(bands => bands.map(band => {\r\n            if (band.id === id) {\r\n                band.name = newName;\r\n            }\r\n            return band;\r\n        })\r\n        );\r\n    }\r\n\r\n    // Input sin Focus\r\n    const onBlurInput = (id, newName) => {\r\n        changeNameBand(id, newName);\r\n    }\r\n\r\n    const createRow = () => {\r\n        return bands.map(band => (\r\n            <tr key={band.id}>\r\n                <td>\r\n                    <button\r\n                        className=\"content-table__btn-add\"\r\n                        onClick={() => addVoteBand(band.id)}\r\n                    >\r\n                        <i className=\"fas fa-plus\"></i>\r\n                    </button>\r\n                </td>\r\n                <td>\r\n                    <input\r\n                        className=\"content-table__input\"\r\n                        type=\"text\" value={band.name}\r\n                        onChange={e => handleOnChageInput(e, band.id)}\r\n                        onBlur={() => onBlurInput(band.id, band.name)}\r\n                    />\r\n                </td>\r\n                <td><h3> {band.votes} </h3></td>\r\n                <td>\r\n                    <button\r\n                        className=\"content-table__btn-remove\"\r\n                        onClick={() => deleteBand(band.id)}\r\n                    >\r\n                        <i className=\"fas fa-trash\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        ));\r\n    }\r\n\r\n    return (\r\n        <div className=\"band-list\">\r\n            <h1 className=\"band-list__title\">Lista de Bandas</h1>\r\n            <table className=\"content-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>Bandas</th>\r\n                        <th>Votos</th>\r\n                        <th>Borrar</th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {createRow()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './spinner.css';\r\n\r\nexport const Spinner = () => {\r\n    return (\r\n        <div className=\"cssload-fond\">\r\n            <div className=\"cssload-container-general\">\r\n                <div className=\"cssload-internal\"><div className=\"cssload-ballcolor cssload-ball_1\"> </div></div>\r\n                <div className=\"cssload-internal\"><div className=\"cssload-ballcolor cssload-ball_2\"> </div></div>\r\n                <div className=\"cssload-internal\"><div className=\"cssload-ballcolor cssload-ball_3\"> </div></div>\r\n                <div className=\"cssload-internal\"><div className=\"cssload-ballcolor cssload-ball_4\"> </div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nimport { BandAdd } from './components/BandAdd';\r\nimport { BandChart } from './components/BandChart';\r\nimport { BandList } from './components/BandList';\r\nimport { Spinner } from './components/ui/Spinner';\r\nimport { SocketContext } from './context/SocketContext';\r\n\r\nfunction HomePage() {\r\n\r\n    const { online } = useContext(SocketContext);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <div className=\"header\">\r\n                <h1 className=\"header__title\">BandNames</h1>\r\n                <p className=\"status\">\r\n                    Estado de Servicio:\r\n                    {\r\n                        online\r\n                            ? (<span className=\"status__online\"> Online</span>)\r\n                            : (<span className=\"status__offline\"> Offline</span>)\r\n                    }\r\n                </p>\r\n            </div>\r\n\r\n            {\r\n                online\r\n                    ?\r\n                    <div className=\"band-container\">\r\n                        <div className=\"band-chart\">\r\n                            <BandChart />  \r\n                        </div>\r\n                        <div className=\"band-options\">\r\n                            <BandAdd />\r\n                            <BandList />\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className=\"spinner\">\r\n                        <Spinner/>\r\n                    </div>\r\n            }\r\n\r\n            \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { SocketProvider } from './context/SocketContext';\r\n\r\nimport App from './HomePage'\r\n\r\nexport const BandNamesApp = () => {\r\n    return (\r\n        <SocketProvider>\r\n            <App/>\r\n        </SocketProvider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/normalize.css';\nimport './styles/index.css';\n\nimport { BandNamesApp } from './BandNamesApp';\n\nReactDOM.render(\n  <BandNamesApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}